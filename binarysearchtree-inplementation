class TreeNode:
# test push to github    
    def __init__(self, key, val, left = None,right = None,parent = None ):
        self.key = key
        self.payload = val
        self.leftchild = left
        self.rightchild = right
        self.parent = parent
        
    def hasleftchild(self):
        return self.leftchild
    
    def hasrightchild(self):
        return self.rightchild
    
    def isleftchild(self):
        return self.parent and self.parent.leftchild == self
    
    def isrightchild(self):
        return self.parent and self.parent.rightchild == self
    
    def isroot(self):
        return not self.parent
    
    def isLeaf(self):
        return not (self.leftchild or self.rightchild)
    
    def hasanychild(self):
        return self.leftchild or self.rightchild
    
    def hasbothchildren(self):
        return self.leftchild and self.rightchild
    
    def replacenodedata(self,key,value,lc,rc):
        self.key = key
        self.val = value
        self.leftchild = lc
        self.rightchild = rc
        if self.hasleftchild():
            self.leftchild.parent = self
        if self.hasrightchild():
            self.rightchild.parent = self
            
class BinarySearchTree(object):
    
    def __init__(self):
        
        self.root = None
        self.size = 0
        
    def length(self):
        return self.size
    
    def __len__(self):
        return self.size
    
    def __iter__(self):
        return self.root.__iter__()
        
    def put(self,key,value):
        if self.root:
            self._put(key,value,self.root)
        else:
            self.root = TreeNode(key,value)
            
    def _put(self,key,value,currentNode):
        if key < currentNode.key:
            if currentNode.hasleftchild:
                self._put(self,key,value,currentNode.leftchild)
            else:
                currentNode.leftchild = TreeNode(key,value,parent = currentNode)
        elif key > currentNode.hey:
            if currentNode.hasrightchild:
                self._put(self, key, value, currentNode.rightchild)
            else:
                currentNode.rightchild = TreeNode(key,value,parent = currentNode)
            
    def __setitem__(self, key, value):
        self.put(key, value)
        
        
    def get(self,key):
        if self.root:
            res = self._get(key, self.root) #search from root
            if res:
                return res.payload
            else:
                return None
            
        else:
            return None
        
    def _get(self, key, currentnode):
        if not currentnode:
            return None
        elif currentnode.key == key:
            return currentnode
        elif currentnode.key > key:
            return self._get(key, currentnode.rightchild)
        else:
            return self._get(key, currentnode.leftchild)
        
    def __getitem__(self, key):
        return self.get(key)
    
    def __contains__(self, key):
        if self._get(key,self.root):
            return True
        else:
            return False
        
    def delete(self, key):
        if self.size > 1:
            nodetoremove = self._get(key,self.root)
            if nodetoremove:
                self.remove(nodetoremove)
                self.size = self.size - 1
            else:
                raise Keyerror("error, key not in tree")
        if self.size == 1 and self.root.key == key:
            self.root = None
            self.size = 0
        else:
            return keyerror("error, key not in tree")
            
    def __detitem__(self, key):
        self.delete(key)
        
    def remove(self, currentnode):
        if currentnode.isLeaf():
            if currentnode == currentnode.parent.leftchild:
                currentnode.parent.leftchild = None
            else:
                currentnode.parent.rightchild = None
                
        elif currentnode.hasbothchildren():
            succ = currentnode.findsuccessor()
            succ.spliceout()
            currentnode.key = succ.key
            currentnode.payload = succ.paynode
        
        else: #this node has only one child
            if currentnode.hasleftchild():
                if currentnode.isleftchild():
                    currentnode.leftchild.parent = currentnode.parent
                    currentnode.parent.leftchild = currentnode.leftchild
                elif currentnode.isrightchild():
                    currentnode.leftchild.parent = currentnode.parent
                    currentnode.parent.rightchild = currentnode.leftchild
                else:
                    currentnode.replacenodedata(currentnode.leftchild.key,
                                               currentnode.leftchild.payload,
                                               currentnode.leftchild.leftchild,
                                               currentnode.leftchild.rightchild)
                    
            else:
                if currentnode.isleftchild():
                    currentnode.rightchild.parent = currentnode.parent
                    currentnode.parent.leftchild = currentnode.rightchild
                elif currentnode.isrightchild():
                    currentnode.rightchild.parent = currentnode.parent
                    currentnode.parent.rightchild = currentnode.rightchild
                else:
                    currentnode.replacenodedata(currentnode.rightchild.key,
                                               currentnode.rightchild.payload,
                                               currentnode.rightchild.leftchild,
                                               currentnode.rightchild.rightchild)
                    
    def findsuccessor(self):
        if self.hasrightchild():
            succ = self.rightchild.findmin()
        else:
            if self.parent:
                
                if self.isLeftChild():
                    
                    succ = self.parent
                else:
                    self.parent.rightChild = None
                    succ = self.parent.findSuccessor()
                    self.parent.rightChild = self    
            
        return succ
    
    
    def findmin(self):
        if self.hasleftchild():
            self = self.leftchild
        return self
    
    def spliceOut(self):
        if self.isLeaf():
            if self.isLeftChild():
                
                self.parent.leftChild = None
            else:
                self.parent.rightChild = None
        elif self.hasAnyChildren():
            if self.hasLeftChild():
                
                if self.isLeftChild():
                    
                    self.parent.leftChild = self.leftChild
                else:
                    
                    self.parent.rightChild = self.leftChild
                self.leftChild.parent = self.parent
            else:
                    
                if self.isLeftChild():
                        
                    self.parent.leftChild = self.rightChild
                else:
                    self.parent.rightChild = self.rightChild
                self.rightChild.parent = self.parent
            
        
                                                
                                                
